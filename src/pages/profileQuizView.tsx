import {useRouter} from "next/router";
import {api} from "~/utils/api";
import {quizDataType} from "../../types/types";
import Head from "next/head";
import {GetServerSidePropsContext} from "next";
import {getServerAuthSession} from "~/server/auth";
import {router} from "next/client";
import {prisma} from "~/server/db";


const ProfileQuizView = () => {
    const router = useRouter();
    const {gameID} = router.query;


    const { data: fetchedQuiz } = api.quiz.getQuizzesByQuizID.useQuery({
        quizID: Number.parseInt(gameID as string),
    });



    const quizData = fetchedQuiz?.quizData as unknown as quizDataType; // TODO THIS IS NOT GOOD, move away from JSON on schema.

    return (
        <>
            <Head>
                <title> Quizzical 2 </title>
                <meta name="description" content = "generated by create-t3-app" />
                <link rel = "icon" href= "/favicon.ico" />
            </Head>


            <main className="flex h-screen">
                <div className="m-auto" >

                    {quizData ? (
                            <div>
                                <div className="text-center text-indigo-500 font-extrabold ">
                                    <h1 className="text-5xl my-5 ">Game Results </h1>
                                    <h1 className="my-3" >Game Number: {gameID} </h1>
                                    <h1 className="my-3">score: {fetchedQuiz?.score} out of 5</h1>
                                </div>

                                {quizData.questions.map((ques, i) => {
                                    return (
                                        <div key={i} className={`p-4 mb-4 rounded-md shadow-md ${quizData.selectedAnswers[i] === quizData.correctAns[i] ? "bg-green-600" : "bg-red-600"}`}>
                                            <h2 className="text-lg font-bold mb-2">{ques}</h2>
                                            <div className="grid grid-cols-2 gap-3">
                                                {quizData.allAnswers[i].map((ans, j) => {
                                                    const isCorrect = ans === quizData.correctAns[i];
                                                    return (
                                                        <div key={j} className={`py-2 px-4 rounded-md ${isCorrect ? "bg-green-600 text-white" : "bg-gray-200 text-gray-800"} border border-gray-300`}>
                                                            <p>{ans}</p>
                                                        </div>
                                                    )
                                                })}
                                            </div>
                                        </div>
                                    )
                                })}



                                <div className="flex justify-center pt-5">
                                    <button className="text-white bg-red-500 text-sm p-2 rounded-full transition hover:bg-red-700 w-64 h-11 text-xl font-semibold "
                                            onClick={() => void router.push("/profile")}>Return</button>
                                </div>
                            </div>)

                        :
                        <div>
                            <h1>Loading...</h1>
                        </div>
                    }
                </div>
            </main>
        </>
    )

}


/* using serverside props to ensure that:
 - The current user is logged in
 - The current user is only able to view quizzes they completed.
 - The quiz exists
 */
export const getServerSideProps = async (ctx:GetServerSidePropsContext) => {


    const quizID = ctx.query.gameID

    if(!quizID){ // if quizID is null or undefined, return user.
        return {
            redirect: {
                destination: '/',
                permanent: false,
            },
        }
    }

        const quiz = await prisma.quiz.findUnique({
            where: {
                id: Number.parseInt(quizID?.toString()),
            },
        })

    const session = await getServerAuthSession(ctx); // get user session

    if(!quiz || !session) { // if no quiz exists, return user.
        return {
            redirect: {
                destination: '/',
                permanent: false,
            },
        }
    }


    if(session && quiz ){
        if (session.user.id !== quiz.userId) { // if quiz exists but was not completed by the current logged-in user.
            return {
                redirect: {
                    destination: '/',
                    permanent: false,
                },
            }
        }
    }

    return {
        props: { session },
    };
}

export default ProfileQuizView;
